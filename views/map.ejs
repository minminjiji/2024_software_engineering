<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <title>Kakao 지도 시작하기</title>
    <link rel="stylesheet" href="/styles.css" />
    <style>
        .body {
            margin: 0;
            font-family: Arial, sans-serif;
            display: flex;
            height: 100%;
        }

        #schdule {
            position: absolute;
            width: 350px;
            height: 750px;
            top: 130px;
            left: 13px;
            background-color: rgba(255, 255, 255, 0.7);
            box-sizing: border-box;
            overflow-y: auto;
            border-radius: 25px;
            z-index: 1;
            padding: 5px;
        }

        h3 {
            text-align: center;
            padding: 15px;
            margin-left: 5%;
            margin-right: 5%;
            background-color: rgba(255, 169, 138);
            border-radius: 25px;
            box-shadow: 0px 0px 5px 5px #cfcfcf;
        }

        #map {
            width: 100%;
            height: 800px;
            overflow: hidden;
        }

        #search {
            position: absolute;
            background-color: #fff;
            border-radius: 100%;
            z-index: 1;
            width: 40px;
            height: 40px;
            top: 130px;
            right: 13px;
            margin-right: 50px;
            cursor: pointer;
        }

        #menu_wrap {
            position: absolute;
            right: 120px;
            width: 300px;
            height: 550px;
            top: 130px;
            margin: 10px 0 30px 10px;
            overflow-y: auto;
            background: rgba(255, 255, 255, 0.7);
            z-index: 2;
            font-size: 12px;
            border-radius: 10px;
            display: none;
        }

        .bg_white {
            background: #fff;
        }

        #menu_wrap hr {
            display: block;
            height: 1px;
            border: 0;
            border-top: 2px solid #5F5F5F;
            margin: 3px 0;
        }

        #menu_wrap .option {
            position: sticky;
            top: 0;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 5px;
            z-index: 3;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        #menu_wrap .option p {
            margin: 10px 0;
        }

        #menu_wrap .option button {
            margin-left: 3px;
        }

        #placesList li {
            list-style: none;
        }

        #placesList .item {
            position: relative;
            border-bottom: 1px solid #888;
            overflow: hidden;
            cursor: pointer;
            min-height: 65px;
        }

        #placesList .item span {
            display: block;
            margin-top: 4px;
        }

        #placesList .item h5,
        #placesList .item .info {
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
        }

        #placesList .item .info {
            padding: 10px 0 10px 55px;
        }

        #placesList .info .gray {
            color: #8a8a8a;
        }

        #placesList .info .jibun {
            padding-left: 26px;
            background: url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;
        }

        #placesList .info .tel {
            color: #009900;
        }

        #placesList .item .markerbg {
            float: left;
            position: absolute;
            width: 36px;
            height: 37px;
            margin: 10px 0 0 10px;
            background: url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png) no-repeat;
        }

        #placesList .item .marker_1 {
            background-position: 0 -10px;
        }

        #placesList .item .marker_2 {
            background-position: 0 -56px;
        }

        #placesList .item .marker_3 {
            background-position: 0 -102px
        }

        #placesList .item .marker_4 {
            background-position: 0 -148px;
        }

        #placesList .item .marker_5 {
            background-position: 0 -194px;
        }

        #placesList .item .marker_6 {
            background-position: 0 -240px;
        }

        #placesList .item .marker_7 {
            background-position: 0 -286px;
        }

        #placesList .item .marker_8 {
            background-position: 0 -332px;
        }

        #placesList .item .marker_9 {
            background-position: 0 -378px;
        }

        #placesList .item .marker_10 {
            background-position: 0 -423px;
        }

        #placesList .item .marker_11 {
            background-position: 0 -470px;
        }

        #placesList .item .marker_12 {
            background-position: 0 -516px;
        }

        #placesList .item .marker_13 {
            background-position: 0 -562px;
        }

        #placesList .item .marker_14 {
            background-position: 0 -608px;
        }

        #placesList .item .marker_15 {
            background-position: 0 -654px;
        }

        #pagination {
            margin: 10px auto;
            text-align: center;
        }

        #pagination a {
            display: inline-block;
            margin-right: 10px;
        }

        #pagination .on {
            font-weight: bold;
            cursor: default;
            color: #777;
        }

        .button_container3 {
            display: flex;

        }

        .schedule_item {
            padding: 10px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .schedule_item .info {
            flex-grow: 1;
        }

        .schedule_item .delete_button {
            background-color: transparent;
            border: none;
            margin: 0 5px;
            font-size: 14px;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
        }
    </style>
</head>

<body>
    <div class="header">
        <img src="/images/logo.png" alt="로고" class="logo" onclick="gotoMainPage()" />
        <div class="button-container">
            <button class="button" onclick="gotoStory()">
                여행 스토리
            </button>
            <button class="button" onclick="gototour()">여행지 추천</button>
            <button class="button" onclick="gotofestival()">축제</button>
            <button class="button" onclick="gotocourse()">
                관광지 정보
            </button>
            <button class="button" onclick="toggleMyPageOptions()">
                마이페이지
            </button>
        </div>
        <img src="<%=session.userimage%>" alt="사용자" class="user-image" onclick="toggleUserMenu()" />
        <div class="user-menu" id="userMenu">
            <% if(session.is_logined){%>
                <div class="user-menu-item">
                    <button class="button" onclick="logout()">로그아웃</button>
                </div>
                <%} else{%>
                    <div class="user-menu-item">
                        <button class="button" onclick="register()">회원가입</button>
                    </div>
                    <div class="user-menu-item">
                        <button class="button" onclick="login()">로그인</button>
                    </div>
                    <%}%>
        </div>
    </div>
    <div id="myPageOptions">
        <button class="button" onclick="gotoMyPage()">여행 만들기</button>
        <button class="button" onclick="gotodiary()">일기</button>
        <button class="button" onclick="gotowishlist()">관심 리스트</button>
        <button class="button" onclick="gotoretouch()">
            사용자 정보 수정
        </button>
    </div>
    <hr class="custom">
    <div class="body">
        <div id="map"></div>
        <div id="schdule" class="bg_white">
            <h3>
                <%= pagename %>
            </h3>
            <hr>
            <div class="button_container3">
                <button class="button" onclick="drawRoute()">경로그리기</button>
                <hr>
                <button class="button" onclick="resetSchedule()">리셋</button>
                <hr>
                <button class="button" onclick="saveSchedule()">저장하기</button>

            </div>
            <!-- 일정 리스트 영역 -->
            <hr>
            <div class="schedule_area">
                <ul id="schduleList"></ul>
                <div id="schdulepage"></div>
            </div>
        </div>
        <img src="/images/search.png" id="search" onclick="showSearch()" />
        <div id="menu_wrap" class="bg_white">
            <div class="option">
                <form onsubmit="searchPlaces(); return false;">
                    키워드 : <input type="text" id="keyword" size="15">
                    <button type="submit">검색하기</button>
                </form>
            </div>
            <hr>
            <ul id="placesList"></ul>
            <div id="pagination"></div>
        </div>
    </div>

    <script type="text/javascript"
        src="//dapi.kakao.com/v2/maps/sdk.js?appkey=aa05807c0421a57827951d24fee395da&libraries=services"></script>
    <script>
        // 마커와 폴리라인을 담을 배열입니다
        var markers = [];
        var polylines = [];
        var scheduleList = [];
        var schdule_index = 0;

        var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
            mapOption = {
                center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표
                level: 3 // 지도의 확대 레벨
            };

        // 지도를 생성합니다    
        var map = new kakao.maps.Map(mapContainer, mapOption);

        // 장소 검색 객체를 생성합니다
        var ps = new kakao.maps.services.Places();

        // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
        var infowindow = new kakao.maps.InfoWindow({ zIndex: 1 });

        // 기존 일정 데이터를 JSON 형식으로 파싱합니다.
        var existingSchedules = JSON.parse('<%- schedules %>');  // EJS의 <%- %> 구문을 사용하여 문자열로 직접 삽입합니다.

        if (existingSchedules.length > 0) {
            for (var i = 0; i < existingSchedules.length; i++) {
                console.log(existingSchedules[i]);
                var schedule = existingSchedules[i];
                var position = new kakao.maps.LatLng(schedule.lat, schedule.lng);

                var marker = addMarker(position, i, schedule.place_name);
                map.setCenter(position);

                var item = getScheduleListItem(i + 1, schedule);
                document.getElementById('schduleList').appendChild(item);
                var deleteButton = item.querySelector('.delete_button');

                (function (item, position, i, schedule) {
                    item.onclick = function () {
                        console.log(schedule)
                        if (document.getElementById('schduleList').contains(item)) { // Check if item is a child of scheduleListEl
                            map.setCenter(position);
                            displayInfowindow(marker, schedule.place_name);
                        }
                    }


                    deleteButton.onclick = function () {
                        if (document.getElementById('schduleList').contains(item)) { // Check if item is a child of scheduleListEl
                            document.getElementById('schduleList').removeChild(item);
                            updateScheduleOrder(); // 일정 목록의 순서 업데이트
                            drawRoute(); // 경로 다시 그리기
                        }
                    }
                })(item,position,i,schedule)

            }
            drawRoute();
        }

        // 키워드로 장소를 검색합니다
        searchPlaces();

        // 키워드 검색을 요청하는 함수입니다
        function searchPlaces() {
            var keyword = document.getElementById('keyword').value;
            var listEl = document.getElementById('placesList');
            var paginationEl = document.getElementById('pagination');

            if (!keyword.replace(/^\s+|\s+$/g, '')) {
                // 기존에 추가된 페이지번호를 삭제합니다
                while (paginationEl.hasChildNodes()) {
                    paginationEl.removeChild(paginationEl.lastChild);
                }

                // 검색 결과 목록에 추가된 항목들을 제거합니다
                removeAllChildNods(listEl);

                // 지도에 표시되고 있는 마커를 제거합니다
                removeMarker();
                return false;
            }

            // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
            ps.keywordSearch(keyword, placesSearchCB);
        }

        // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
        function placesSearchCB(data, status, pagination) {
            if (status === kakao.maps.services.Status.OK) {
                // 정상적으로 검색이 완료됐으면
                // 검색 목록과 마커를 표출합니다
                displayPlaces(data);

                // 페이지 번호를 표출합니다
                displayPagination(pagination);
            } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
                alert('검색 결과가 존재하지 않습니다.');
                return;
            } else if (status === kakao.maps.services.Status.ERROR) {
                alert('검색 결과 중 오류가 발생했습니다.');
                return;
            }
        }

        // 검색 결과 목록과 마커를 표출하는 함수입니다
        function displayPlaces(places) {
            var listEl = document.getElementById('placesList'),
                menuEl = document.getElementById('menu_wrap'),
                fragment = document.createDocumentFragment(),
                schfragment = document.createDocumentFragment(),
                bounds = new kakao.maps.LatLngBounds(),
                listStr = '';
            var scheduleListEl = document.getElementById('schduleList');

            // 검색 결과 목록에 추가된 항목들을 제거합니다
            removeAllChildNods(listEl);

            // 지도에 표시되고 있는 마커를 제거합니다
            removeMarker();

            for (var i = 0; i < places.length; i++) {
                var placePosition = new kakao.maps.LatLng(places[i].y, places[i].x),
                    marker = addMarker(placePosition, i, places[i].place_name),
                    itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다

                // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
                // LatLngBounds 객체에 좌표를 추가합니다
                bounds.extend(placePosition);

                // 마커와 검색결과 항목에 mouseover 했을때
                // 해당 장소에 인포윈도우에 장소명을 표시합니다
                // mouseout 했을 때는 인포윈도우를 닫습니다
                (function (marker, title, place, i, placePosition) {
                    kakao.maps.event.addListener(marker, 'mouseover', function () {
                        displayInfowindow(marker, title);
                    });

                    kakao.maps.event.addListener(marker, 'mouseout', function () {
                        infowindow.close();
                    });

                    itemEl.onclick = function () {
                        map.setCenter(placePosition);
                        var item = getScheduleListItem(scheduleListEl.children.length + 1, place); // 일정 항목 생성 시 순서 포함
                        scheduleListEl.appendChild(item);

                        item.onclick = function () {
                            if (scheduleListEl.contains(item)) { // Check if item is a child of scheduleListEl
                                map.setCenter(placePosition);
                                displayInfowindow(marker, title);
                            }
                        }

                        var deleteButton = item.querySelector('.delete_button');
                        deleteButton.onclick = function () {
                            if (scheduleListEl.contains(item)) { // Check if item is a child of scheduleListEl
                                scheduleListEl.removeChild(item);
                                updateScheduleOrder(); // 일정 목록의 순서 업데이트
                                drawRoute(); // 경로 다시 그리기
                            }
                        }
                    }

                    itemEl.onmouseover = function () {
                        displayInfowindow(marker, title);
                    };

                    itemEl.onmouseout = function () {
                        infowindow.close();
                    };
                })(marker, places[i].place_name, places[i], i, placePosition);

                fragment.appendChild(itemEl);
            }

            // 검색결과 항목들을 검색결과 목록 Element에 추가합니다
            listEl.appendChild(fragment);
            menuEl.scrollTop = 0;

            // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
            map.setBounds(bounds);
        }

        // 검색결과 항목을 Element로 반환하는 함수입니다
        function getListItem(index, places) {
            var el = document.createElement('li'),
                itemStr = '<span class="markerbg marker_' + (index + 1) + '"></span>' +
                    '<div class="info">' +
                    '   <h5>' + places.place_name + '</h5>';

            if (places.road_address_name) {
                itemStr += '    <span>' + places.road_address_name + '</span>' +
                    '   <span class="jibun gray">' + places.address_name + '</span>';
            } else {
                itemStr += '    <span>' + places.address_name + '</span>';
            }

            itemStr += '  <span class="tel">' + places.phone + '</span>' +
                '</div>';

            el.innerHTML = itemStr;
            el.className = 'item';

            return el;
        }

        // 일정 목록 항목을 Element로 반환하는 함수입니다 (순서를 포함)
        function getScheduleListItem(order, places) {
            var el = document.createElement('li'),
                itemStr = '<div class="schedule_item"><span class="order">' + order + '</span>' +
                    '<div class="info">' +
                    '   <h5>' + places.place_name + '</h5>';
            console.log(places.address_name)
            if (places.road_address_name) {
                itemStr += '    <span>' + places.road_address_name + '</span>' +
                    '   <span class="jibun gray">' + places.address_name + '</span>';
            } else {
                itemStr += '    <span>' + places.address_name + '</span>';
            }

            itemStr += '  <span class="tel">' + places.phone + '</span>' +
                '</div>' +
                '<button class="delete_button">삭제</button></div>';

            el.innerHTML = itemStr;
            el.className = 'item';

            return el;
        }

        // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
        function addMarker(position, idx, title) {
            var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
                imageSize = new kakao.maps.Size(36, 37),  // 마커 이미지의 크기
                imgOptions = {
                    spriteSize: new kakao.maps.Size(36, 691), // 스프라이트 이미지의 크기
                    spriteOrigin: new kakao.maps.Point(0, (idx * 46) + 10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
                    offset: new kakao.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표
                },
                markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imgOptions),
                marker = new kakao.maps.Marker({
                    position: position, // 마커의 위치
                    image: markerImage
                });

            marker.setMap(map); // 지도 위에 마커를 표출합니다
            markers[idx] = marker;  // 배열에 생성된 마커를 추가합니다

            // 마커 클릭 이벤트를 추가합니다
            kakao.maps.event.addListener(marker, 'click', function () {
                displayInfowindow(marker, title);
            });

            return marker;
        }

        // 지도 위에 표시되고 있는 마커를 모두 제거합니다
        function removeMarker() {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }
            markers = [];
            removePolyline(); // 기존 폴리라인 제거
        }

        // 지도 위에 표시되고 있는 폴리라인을 모두 제거합니다
        function removePolyline() {
            for (var i = 0; i < polylines.length; i++) {
                polylines[i].setMap(null);
            }
            polylines = [];
        }

        // 검색결과 목록 하단에 페이지번호를 표시는 함수입니다
        function displayPagination(pagination) {
            var paginationEl = document.getElementById('pagination'),
                fragment = document.createDocumentFragment(),
                i;

            // 기존에 추가된 페이지번호를 삭제합니다
            while (paginationEl.hasChildNodes()) {
                paginationEl.removeChild(paginationEl.lastChild);
            }

            for (i = 1; i <= pagination.last; i++) {
                var el = document.createElement('a');
                el.href = "#";
                el.innerHTML = i;

                if (i === pagination.current) {
                    el.className = 'on';
                } else {
                    el.onclick = (function (i) {
                        return function () {
                            pagination.gotoPage(i);
                        }
                    })(i);
                }

                fragment.appendChild(el);
            }
            paginationEl.appendChild(fragment);
        }

        // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
        // 인포윈도우에 장소명을 표시합니다
        function displayInfowindow(marker, title) {
            var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';
            infowindow.setContent(content);
            infowindow.open(map, marker);
        }

        // 검색결과 목록의 자식 Element를 제거하는 함수입니다
        function removeAllChildNods(el) {
            while (el.hasChildNodes()) {
                el.removeChild(el.lastChild);
            }
        }

        // 일정 목록의 순서를 업데이트하는 함수입니다
        function updateScheduleOrder() {
            var scheduleListEl = document.getElementById('schduleList');
            var items = scheduleListEl.children;
            for (var i = 0; i < items.length; i++) {
                var orderEl = items[i].querySelector('.order');
                orderEl.textContent = (i + 1).toString();
            }
        }

        // 일정 목록에 있는 위치를 지도에 마커로 표시하고 선으로 잇는 함수입니다
        function drawRoute() {
            // 지도에 있는 기존 마커와 폴리라인 제거
            removeMarker();

            // 일정 목록 가져오기
            var scheduleListEl = document.getElementById('schduleList');
            var items = scheduleListEl.children;
            var path = [];

            // 일정 목록에 있는 위치를 마커로 추가하고 경로를 생성
            for (var i = 0; i < items.length; i++) {
                var placeName = items[i].querySelector('.info h5').innerText;
                var placeAddress = items[i].querySelector('.info span').innerText;

                // 장소 검색 객체를 통해 주소로 좌표 검색
                (function (index) {
                    ps.keywordSearch(placeName, function (data, status) {
                        if (status === kakao.maps.services.Status.OK) {
                            var position = new kakao.maps.LatLng(data[0].y, data[0].x);
                            addMarker(position, index, placeName);
                            path[index] = position; // 경로 배열에 올바른 순서를 유지

                            // 모든 마커가 추가된 후 폴리라인을 그림
                            if (path.filter(Boolean).length === items.length) {
                                var polyline = new kakao.maps.Polyline({
                                    path: path.filter(Boolean), // undefined 위치를 필터링
                                    strokeWeight: 5,
                                    strokeColor: '#FFAE00',
                                    strokeOpacity: 0.8,
                                    strokeStyle: 'solid'
                                });
                                polyline.setMap(map);
                                polylines.push(polyline);
                            }
                        }
                    });
                })(i);
            }
        }

        function resetSchedule() {
            // Clear the schedule list
            var scheduleListEl = document.getElementById('schduleList');
            while (scheduleListEl.hasChildNodes()) {
                scheduleListEl.removeChild(scheduleListEl.lastChild);
            }

            // Reset the map
            removeMarker(); // This will also call removePolyline to clear the polylines
            map.setCenter(new kakao.maps.LatLng(37.566826, 126.9786567)); // Reset the map center to the initial coordinates
            map.setLevel(3); // Reset the zoom level to the initial level
        }

        function saveSchedule() {
            var scheduleListEl = document.getElementById('schduleList');
            var items = scheduleListEl.children;
            var scheduleData = [];
            var pageId = "<%= pageId %>"; // EJS를 사용하여 서버에서 pageId를 전달받음

            for (var i = 0; i < items.length; i++) {
                var placeName = items[i].querySelector('.info h5').innerText;
                var placeAddress = items[i].querySelector('.info span').innerText;
                var placePhoneEl = items[i].querySelector('.info .tel').innerText; // 수정된 부분

                var marker = markers[i];
                if (marker) {
                    var position = marker.getPosition();
                    var lat = position.getLat();
                    var lng = position.getLng();

                    scheduleData.push({
                        name: placeName,
                        address: placeAddress,
                        phone: placePhoneEl,
                        lat: lat,
                        lng: lng
                    });
                }
            }

            fetch('/save-schedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ pageId: pageId, scheduleData: scheduleData })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('일정이 성공적으로 저장되었습니다.');
                    } else {
                        alert('일정 저장에 실패했습니다.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('일정 저장 중 오류가 발생했습니다.');
                });
        }
    </script>

    <script>
        function register() {
            alert("회원가입 페이지로 이동합니다.");
            window.location.href = "/signup";
        }
        function gotoMyPage() {
            window.location.href = "/maketravel/<%=session.user_id%>";
        }

        function login() {
            alert("로그인 페이지로 이동합니다.");
            window.location.href = "/login";
        }

        function logout() {
            alert("로그아웃합니다.");
            window.location.href = "/logout";
        }

        function gotoMainPage() {
            window.location.href = "/";
        }

        function goBack() {
            window.history.back();
        }

        function gotoStory() {
            window.location.href = "/";
        }

        function gototour() {
            window.location.href = "/tour";
        }

        function gotocourse() {
            window.location.href = "/course";
        }

        function gotofestival() {
            window.location.href = "/festival";
        }

        function gotodiary() {
            window.location.href = "/diary-list/<%= session.user_id %>";
        }

        function gotowishlist() {
            window.location.href = "/wishlist";
        }

        function gotoretouch() {
            window.location.href = "/retouch/<%= session.user_id %>";
        }

        function toggleMyPageOptions() {
            var myPageOptions = document.getElementById("myPageOptions");
            if (myPageOptions.style.display === "block") {
                myPageOptions.style.display = "none";
            } else {
                myPageOptions.style.display = "block";
            }
        }

        function toggleUserMenu() {
            var userMenu = document.getElementById("userMenu");
            if (userMenu.style.display === "block") {
                userMenu.style.display = "none";
            } else {
                userMenu.style.display = "block";
            }
        }

        function showSearch() {
            var menu_wrap = document.getElementById("menu_wrap");
            if (menu_wrap.style.display === "block") {
                menu_wrap.style.display = "none";
            } else {
                menu_wrap.style.display = "block";
            }
        }
    </script>
</body>

</html>